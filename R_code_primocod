#primo codice ecologia del paesaggio


install.packages("sp")

library(sp) #require(sp) è un altro comando

#importo dataset
data("meuse")
head(meuse) #per visualizzare le prime righe, molto potente
names(meuse) #altra funzione interessante, stavolta per visualizzare nomi variabili

#statistiche di base
summary(meuse)

#grafico sulle correlazioni tra tutte le variabili 
pairs(meuse) #ci saranno zone più inquinate in base al contenuto in metalli
pairs(~ cadmium + copper + lead , data = meuse) #tilde significa uguale mentre la virgola è un separatore degli argomenti in funzione

#primo esercizio, aggiungi alla funzione precedente zinco
pairs(~ cadmium + copper + lead + zinc, data = meuse)

#metodo per fare un subset di undatabase selezionando solo alcune V
pairs(meuse[,3:6]) #dove i numeri si riferiscon alle colonne e le parentesi quadre indicano il subset 
pairs(meuse[,3:6], col="green") #dove si aggiunge una funzione relativa al colore
pairs(meuse[,3:6], col="green", pch=19) #pch=point character per cambiare il carattere dei punti, in questo caso i punti si colorano
pairs(meuse[,3:6], col="green", pch=19, cex=0.5) #per cambiare la dimensione dei punti
pairs(meuse[,3:6], col="green", pch=19, cex=0.5, main="Primo pairs") #per aggiungere un titolo al grafico

#secondo esercizio, aggiungi al grafico elevation
pairs(meuse[,3:7], col="green", pch=19, cex=0.5, main="Primo pairs")

#per utilizzare una funzione/codice esterna/o
panel.correlations <- function(x, y, digits=1, prefix="", cex.cor)
{
  usr <- par("usr"); on.exit(par(usr))
  par(usr = c(0, 1, 0, 1))
  r1=cor(x,y,use="pairwise.complete.obs")
  r <- abs(cor(x, y,use="pairwise.complete.obs"))
  
  txt <- format(c(r1, 0.123456789), digits=digits)[1]
  txt <- paste(prefix, txt, sep="")
  if(missing(cex.cor)) cex <- 0.9/strwidth(txt)
  text(0.5, 0.5, txt, cex = cex * r)
} #x e y indica qualsiasi due variabili

panel.smoothing <- function (x, y, col = par("col"), bg = NA, pch = par("pch"),
                             cex = 1, col.smooth = "red", span = 2/3, iter = 3, ...)
{
  points(x, y, pch = pch, col = col, bg = bg, cex = cex)
  ok <- is.finite(x) & is.finite(y)
  if (any(ok))
    lines(stats::lowess(x[ok], y[ok], f = span, iter = iter),
          col = 1, ...)
}#lowess è uno smoother locale 

panel.histograms <- function(x, ...)
{
  usr <- par("usr"); on.exit(par(usr))
  par(usr = c(usr[1:2], 0, 1.5) )
  h <- hist(x, plot = FALSE)
  breaks <- h$breaks; nB <- length(breaks)
  y <- h$counts; y <- y/max(y)
  rect(breaks[-nB], 0, breaks[-1], y, col="white", ...)
}

pairs(meuse[,3:6], lower.panel = panel.correlations, upper.panel = panel.smoothing, diag.panel = panel.histograms) 
#lower.panel indica la parte inferiore del grafico per cui qui si decide di inserire la funzione relativa alle correlazioni
#upper.panel indica la parte superiore del grafico per cui qui si decide di inserire la funzione relativa allo smoothing
#diag.panel indica la parte diagonale per cui si inserisce la funzione relativa agli istogrammi

#terzo esercizio, scambia la disposizione delle funzioni tra upper e lower
pairs(meuse[,3:6], lower.panel = panel.smoothing, upper.panel = panel.correlations, diag.panel = panel.histograms) 
 
#altra funzione per produrre grafici
plot(meuse$cadmium, meuse$copper) #il dollaro serve per collegare la colonna col proprio dataset

attach(meuse) #funzione per inserire il dataset all'interno di R se non già fatto e spiega a R 
#che utilizzeremo sempre questo dataset per tutte le funzioni da qui in avanti

#quindi rifacendo il plot senza il dollaro ora vedrai che funzionerà comunque grazie ad "attach"
plot(cadmium, copper, pch=17) 
plot(cadmium, copper, pch=17, xlab="cadmio", ylab="rame") #per cambiare i nomi relativi agli assi
plot(cadmium, copper, pch=17, xlab="cadmio", ylab="rame", cex.lab=2) #per cambiare la grandezza dei nomi relativi agli assi


